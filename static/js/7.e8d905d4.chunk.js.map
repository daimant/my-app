{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","classes","formControl","Textarea","props","input","restProps","Input","createField","component","name","placeholder","validate","text","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,+LCGrHC,EAAc,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACzCC,EAAWH,GAAWC,EAC5B,OACE,yBACEG,UAAWC,IAAQC,YAAc,KAAOH,EAAWE,IAAQJ,MAAQ,KAEnE,6BAAMC,GACLC,GAAY,8BAAOF,KAIbM,EAAW,SAAAC,GAAU,IACxBC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADgB,YACOS,EADP,mBAE/B,OACE,kBAACV,EAAgBU,EACf,8CAAcC,EAAWC,MAIlBC,EAAQ,SAAAH,GAAU,IACrBC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADa,YACUS,EADV,mBAE5B,OACE,kBAACV,EAAgBU,EACf,2CAAWC,EAAWC,MAIfE,EAAc,SACzBC,EACAC,EACAC,EACAC,EACAR,GALyB,IAMzBS,EANyB,uDAMlB,GANkB,OAQzB,6BACE,kBAAC,IAAD,eACEJ,UAAWA,EACXC,KAAMA,EACNC,YAAaA,EACbC,SAAUA,GACNR,IAELS,K,iCC/CL,oEAAO,IAAMC,EAAW,SAAAC,GACtB,IAAIA,EACJ,MAAO,+KAGIC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GAC3C,GAAIA,EAAMG,OAASD,EACjB,MAAM,iHAAN,OAA8BA,EAA9B,wD,iCCPJ,gGA6BME,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EApBL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAczB,EAAY,EAAZA,MACjC,OACE,0BAAM0B,SAAUD,GACbd,YAAYD,IAAO,QAAS,QAAS,CAACO,MACtCN,YAAYD,IAAO,WAAY,uCAAU,CAACO,MAC1CN,YACCD,IACA,aACA,KACA,GACA,CAAEiB,KAAM,YACR,+FAED3B,GAAS,yBAAKG,UAAWC,IAAQwB,kBAAmB5B,GACrD,6BACE,8CAyBO6B,uBAJS,SAAAC,GAAK,MAAK,CAChCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEE,WAA3BJ,EAnBD,SAAAtB,GAIZ,OAAIA,EAAMwB,OACD,kBAAC,IAAD,CAAUG,GAAI,aAIrB,6BACE,kGACA,kBAACZ,EAAD,CAAgBI,SAVH,SAAAS,GACf5B,EAAM0B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.e8d905d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2eYDn\",\"error\":\"FormsControls_error__rL43t\",\"formSummaryError\":\"FormsControls_formSummaryError__1oEjB\"};","import React from \"react\";\r\nimport classes from \"./FormsControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormControl = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div\r\n      className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n    >\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\nexport const Textarea = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\nexport const Input = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\nexport const createField = (\r\n  component,\r\n  name,\r\n  placeholder,\r\n  validate,\r\n  props,\r\n  text = \"\"\r\n) => (\r\n  <div>\r\n    <Field\r\n      component={component}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validate}\r\n      {...props}\r\n    />\r\n    {text}\r\n  </div>\r\n);\r\n","export const required = value => {\r\n  if (value) return undefined;\r\n  return \"Поле обязательно для заполнения\";\r\n};\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  if (value.length > maxLength)\r\n    return `Максимальная длинна ${maxLength} символов`;\r\n  return undefined;\r\n};\r\n","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport classes from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField(Input, \"email\", \"Email\", [required])}\r\n      {createField(Input, \"password\", \"Пароль\", [required])}\r\n      {createField(\r\n        Input,\r\n        \"rememberMe\",\r\n        null,\r\n        [],\r\n        { type: \"checkbox\" },\r\n        \"Запомнить пароль\"\r\n      )}\r\n      {error && <div className={classes.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\r\nconst Login = props => {\r\n  const onSubmit = formData => {\r\n    props.login(formData.email, formData.password, formData.rememberMe);\r\n  };\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Авторизация</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}
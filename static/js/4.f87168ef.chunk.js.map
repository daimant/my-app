{"version":3,"sources":["components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","assets/images/user.png","components/Profile/ProfInfo/ProfInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfInfo/ProfileStatus.jsx","components/Profile/ProfInfo/ProfileDataForm.jsx","components/Profile/ProfInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.js"],"names":["FormControl","meta","touched","error","children","hasError","className","classes","formControl","Textarea","props","input","restProps","Input","createField","component","name","placeholder","validate","text","module","exports","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatus","isOwner","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","onChange","e","currentTarget","autoFocus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","onSubmit","formSummaryError","userId","fullName","lookingForAJob","type","lookingForAJobDescription","aboutMe","keys","contacts","map","key","contact","ProfileData","goToEditMode","onClick","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","avatar","src","photos","large","defaultProfilePicture","alt","target","files","initialValues","formData","then","Post","img","message","likeCounts","id","item","MyPosts","React","memo","postsData","addPost","postsElement","p","postsBlock","AddNewPostFormRedux","values","newPostText","posts","maxLength10","Field","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","refreshProfile","match","params","authorizedUserId","getUserProfile","getStatus","this","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"sRAIMA,EAAc,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACzCC,EAAWH,GAAWC,EAC5B,OACE,yBACEG,UAAWC,IAAQC,YAAc,KAAOH,EAAWE,IAAQJ,MAAQ,KAEnE,6BAAMC,GACLC,GAAY,8BAAOF,KAIbM,EAAW,SAAAC,GAAU,IACxBC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADgB,YACOS,EADP,mBAE/B,OACE,kBAACV,EAAgBU,EACf,8CAAcC,EAAWC,MAIlBC,EAAQ,SAAAH,GAAU,IACrBC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADa,YACUS,EADV,mBAE5B,OACE,kBAACV,EAAgBU,EACf,2CAAWC,EAAWC,MAIfE,EAAc,SACzBC,EACAC,EACAC,EACAC,EACAR,GALyB,IAMzBS,EANyB,uDAMlB,GANkB,OAQzB,6BACE,kBAAC,IAAD,eACEJ,UAAWA,EACXC,KAAMA,EACNC,YAAaA,EACbC,SAAUA,GACNR,IAELS,K,oBC9CLC,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAAAC,GACtB,IAAIA,EACJ,MAAO,+KAGIC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GAC3C,GAAIA,EAAMG,OAASD,EACjB,MAAM,iHAAN,OAA8BA,EAA9B,wD,oBCPJL,EAAOC,QAAU,IAA0B,kC,oBCC3CD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,OAAS,yBAAyB,iBAAmB,mCAAmC,QAAU,0BAA0B,iBAAmB,qC,oBCAjND,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,wGCGV,SAASM,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGjB,QAETM,GAAKM,EAAKT,SAAWG,GAH8CO,GAAK,IAK9E,MAAOS,GACPR,GAAK,EACLC,EAAKO,EACL,QACA,IACOT,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAiB,EAAA,GAA2BlB,EAAKC,IGLjF,WACb,MAAM,IAAIkB,UAAU,6IHIgF,G,yDIuCvFC,EA1CO,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,aAAiBxC,EAAY,8CAC/ByC,oBAAS,GADsB,GACxDC,EADwD,KAC9CC,EAD8C,SAEnCF,mBAASzC,EAAM4C,QAFoB,GAExDA,EAFwD,KAEhDC,EAFgD,KAG7DC,qBAAU,WACRD,EAAU7C,EAAM4C,UACf,CAAC5C,EAAM4C,SAaV,OACE,8BACIF,GACA,6BACE,0BAAMK,cAfW,WACnBR,GAASI,GAAY,KAejB,oEADF,IACkB3C,EAAM4C,QAAU,kEAIrCF,GACC,qEACU,IACR,2BACEM,OArBiB,WACzBL,GAAY,GACZH,EAAaI,IAoBLK,SAlBa,SAAAC,GACrBL,EAAUK,EAAEC,cAActC,QAkBlBuC,WAAW,EACXvC,MAAO+B,O,kBCwBJS,EAJkBC,YAAU,CAAEC,KAAM,gBAAlBD,EA/CT,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,aAAchE,EAAY,EAAZA,MAChD,OACE,0BAAMiE,SAAUD,GACd,0FACChE,GAAS,yBAAKG,UAAWC,IAAQ8D,kBAAmBlE,GACrD,6BACE,kCADF,IACc+D,EAAQI,QAEtB,6BACE,kDADF,IACeJ,EAAQK,SACpBzD,YAAYD,IAAO,WAAY,0DAAc,IAAK,KAErD,6BACE,gHADF,IAC2BqD,EAAQM,eAAiB,eAAO,qBACxD1D,YAAYD,IAAO,iBAAkB,GAAI,GAAI,CAAE4D,KAAM,cAExD,6BACE,6FAAoB,IACnBP,EAAQQ,0BACLR,EAAQQ,0BACR,sEACH5D,YACCL,IACA,4BACA,2JACA,KAGJ,6BACE,qEADF,IACmByD,EAAQS,QAAUT,EAAQS,QAAU,sEACpD7D,YAAYL,IAAU,UAAW,wCAAW,KAE/C,6BACE,gFAAiB,IAChByB,OAAO0C,KAAKV,EAAQW,UAAUC,KAAI,SAACC,EAAKlD,GACvC,OACE,yBAAKkD,IAAKlD,EAAGvB,UAAWC,IAAQyE,SAC9B,2BAAID,GACHjE,YAAYL,IAAU,YAAcsE,EAAKA,EAAK,aCiBvDE,EAAc,SAAC,GAAwC,IAAtCf,EAAqC,EAArCA,QAASjB,EAA4B,EAA5BA,QAASiC,EAAmB,EAAnBA,aACvC,OACE,6BACGjC,GACC,6BACE,4BAAQkC,QAASD,GAAjB,qDAGJ,6BACE,kCADF,IACchB,EAAQI,QAEtB,6BACE,kDADF,IACeJ,EAAQK,UAEvB,6BACE,gHADF,IAC2BL,EAAQM,eAAiB,eAAO,sBAE3D,6BACE,6FAAoB,IACnBN,EAAQQ,0BACLR,EAAQQ,0BACR,uEAEN,6BACE,qEADF,IACmBR,EAAQS,QAAUT,EAAQS,QAAU,uEAEvD,6BACE,gFAAiB,IAChBzC,OAAO0C,KAAKV,EAAQW,UAAUC,KAAI,SAACC,EAAKlD,GACvC,OACE,kBAAC,EAAD,CACEkD,IAAKlD,EACLuD,aAAcL,EACdM,aAAcnB,EAAQW,SAASE,WAQvCO,EAAU,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC/B,OACE,yBAAK/E,UAAWC,IAAQyE,SACtB,2BAAII,EAAJ,KADF,IAC0BC,GAA8B,wEAK7CE,EA1GK,SAAC,GAOd,IANLrB,EAMI,EANJA,QACAZ,EAKI,EALJA,OACAJ,EAII,EAJJA,aACAD,EAGI,EAHJA,QACAuC,EAEI,EAFJA,UACAC,EACI,EADJA,YACI,IAC0BtC,oBAAS,GADnC,GACCC,EADD,KACWC,EADX,KAGJ,IAAKa,EACH,OAAO,kBAACwB,EAAA,EAAD,MAUT,OACE,6BACE,yBAAKpF,UAAWC,IAAQoF,kBACtB,yBACErF,UAAWC,IAAQqF,OACnBC,IAAK3B,EAAQ4B,OAAOC,OAASC,IAC7BC,IAAKD,MAEP,6BACG/C,GAAW,2BAAOwB,KAAM,OAAQd,SAjBb,SAAAC,GACtBA,EAAEsC,OAAOC,MAAMzE,QAAQ8D,EAAU5B,EAAEsC,OAAOC,MAAM,QAkBhD,kBAAC,EAAD,CACE7C,OAAQA,EACRJ,aAAcA,EACdD,QAASA,IAEVG,EACC,kBAAC,EAAD,CACEgD,cAAelC,EACfA,QAASA,EACTE,SAxBO,SAAAiC,GACfZ,EAAYY,GAAUC,MAAK,kBAAMjD,GAAY,SA0BvC,kBAAC,EAAD,CACEa,QAASA,EACTjB,QAASA,EACTiC,aAAc,WACZ7B,GAAY,S,4CCvCXkD,EAZF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,GACxC,OACE,yBAAKrG,UAAWC,IAAQqG,KAAM7B,IAAK4B,GACjC,yBAAKd,IAAKW,EAAKP,IAAKD,MACnBS,EACD,6BACE,8BAAOC,EAAP,4C,kBCAFG,EAAUC,IAAMC,MAAK,YAA6B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACnCC,EAAeF,EAAUlC,KAAI,SAAAqC,GAAC,OAChC,kBAAC,EAAD,CACEV,QAASU,EAAEV,QACXD,IAAKW,EAAEX,IACPE,WAAYS,EAAET,WACdC,GAAIQ,EAAER,GACN5B,IAAKoC,EAAER,QAQX,OACE,yBAAKrG,UAAWC,IAAQ6G,YACtB,6BACE,gEACA,kBAACC,EAAD,CAAqBjD,SARX,SAAAkD,GACdL,EAAQK,EAAOC,iBASb,yBAAKjH,UAAWC,IAAQiH,OAAQN,OAIhCO,EAAcjG,YAAiB,IAkB/B6F,EAAsBrD,YAAU,CAAEC,KAAM,yBAAlBD,EAjBL,SAAAtD,GACrB,OACE,0BAAM0D,SAAU1D,EAAMyD,cACpB,6BACE,kBAACuD,EAAA,EAAD,CACE1G,KAAK,cACLD,UAAWN,IACXS,SAAU,CAACI,IAAUmG,GACrBxG,YAAa,uGAGjB,6BACE,mHASO4F,I,QCpCAc,EAFUC,aAfH,SAAAC,GACpB,MAAO,CACLb,UAAWa,EAAMC,YAAYd,UAC7BO,YAAaM,EAAMC,YAAYP,gBAIV,SAAAQ,GACvB,MAAO,CACLd,QAAS,SAAAM,GACPQ,EAASC,YAAqBT,QAKXK,CAA6Cf,GCQvDoB,EAvBC,SAAC,GAOV,IANLhF,EAMI,EANJA,QACAiB,EAKI,EALJA,QACAZ,EAII,EAJJA,OACAJ,EAGI,EAHJA,aACAsC,EAEI,EAFJA,UACAC,EACI,EADJA,YAEA,OACE,6BACE,kBAAC,EAAD,CACExC,QAASA,EACTiB,QAASA,EACTZ,OAAQA,EACRJ,aAAcA,EACdsC,UAAWA,EACXC,YAAaA,IAEf,kBAAC,EAAD,Q,gBCTAyC,E,4MACJC,eAAiB,WACf,IAAI7D,EAAS,EAAK5D,MAAM0H,MAAMC,OAAO/D,OAChCA,IACHA,EAAS,EAAK5D,MAAM4H,kBAEtB,EAAK5H,MAAM6H,eAAejE,GAC1B,EAAK5D,MAAM8H,UAAUlE,I,kEAIrBmE,KAAKN,mB,yCAGYO,EAAWC,EAAWC,GACnCH,KAAK/H,MAAM0H,MAAMC,OAAO/D,SAAWoE,EAAUN,MAAMC,OAAO/D,QAC5DmE,KAAKN,mB,+BAIP,OACE,kBAAC,EAAD,iBACMM,KAAK/H,MADX,CAEEuC,SAAUwF,KAAK/H,MAAM0H,MAAMC,OAAO/D,OAClCJ,QAASuE,KAAK/H,MAAMwD,QACpBZ,OAAQmF,KAAK/H,MAAM4C,OACnBJ,aAAcuF,KAAK/H,MAAMwC,aACzBsC,UAAWiD,KAAK/H,MAAM8E,UACtBC,YAAagD,KAAK/H,MAAM+E,mB,GA5BDqB,IAAM+B,WAwCtBC,sBACblB,aAPoB,SAAAC,GAAK,MAAK,CAC9B3D,QAAS2D,EAAMC,YAAY5D,QAC3BZ,OAAQuE,EAAMC,YAAYxE,OAC1BgF,iBAAkBT,EAAMkB,KAAKzE,OAC7B0E,OAAQnB,EAAMkB,KAAKC,UAGM,CACvBT,mBACAC,cACAtF,iBACAsC,cACAC,kBAEFwD,IARaH,CASbZ","file":"static/js/4.f87168ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./FormsControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormControl = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div\r\n      className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\r\n    >\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\nexport const Textarea = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\nexport const Input = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\nexport const createField = (\r\n  component,\r\n  name,\r\n  placeholder,\r\n  validate,\r\n  props,\r\n  text = \"\"\r\n) => (\r\n  <div>\r\n    <Field\r\n      component={component}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validate}\r\n      {...props}\r\n    />\r\n    {text}\r\n  </div>\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__39T7p\",\"error\":\"FormsControls_error__1RcPh\",\"formSummaryError\":\"FormsControls_formSummaryError__3ZRfe\"};","export const required = value => {\r\n  if (value) return undefined;\r\n  return \"Поле обязательно для заполнения\";\r\n};\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  if (value.length > maxLength)\r\n    return `Максимальная длинна ${maxLength} символов`;\r\n  return undefined;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/user.b0067151.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundImg\":\"ProfInfo_backgroundImg__198UH\",\"avatar\":\"ProfInfo_avatar__2DXkf\",\"descriptionBlock\":\"ProfInfo_descriptionBlock__1wXKw\",\"contact\":\"ProfInfo_contact__CEYas\",\"formSummaryError\":\"ProfInfo_formSummaryError__2ckMe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__EuxMD\",\"posts\":\"MyPosts_posts__3_4Eg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3HJpX\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatus = ({ isOwner, updateStatus, ...props }) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    if (isOwner) setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(status);\r\n  };\r\n  const onStatusChange = e => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            <b>Статус:</b> {props.status || \"Статуса нет\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          Статус:{\" \"}\r\n          <input\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport classes from \"./ProfInfo.module.css\";\r\n\r\nconst ProfileDataForm = ({ profile, handleSubmit, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <button>Сохранить</button>\r\n      {error && <div className={classes.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Id:</b> {profile.userId}\r\n      </div>\r\n      <div>\r\n        <b>Имя:</b> {profile.fullName}\r\n        {createField(Input, \"fullName\", \"Полное имя\", [])}{\" \"}\r\n      </div>\r\n      <div>\r\n        <b>В поиске работы:</b> {profile.lookingForAJob ? \"Да\" : \"Нет\"}\r\n        {createField(Input, \"lookingForAJob\", \"\", [], { type: \"checkbox\" })}\r\n      </div>\r\n      <div>\r\n        <b>Проф.навыки:</b>{\" \"}\r\n        {profile.lookingForAJobDescription\r\n          ? profile.lookingForAJobDescription\r\n          : \"не заполнено\"}\r\n        {createField(\r\n          Textarea,\r\n          \"lookingForAJobDescription\",\r\n          \"Мои профессиональные навыки\",\r\n          []\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>Обо мне:</b> {profile.aboutMe ? profile.aboutMe : \"не заполнено\"}\r\n        {createField(Textarea, \"aboutMe\", \"Обо мне\", [])}\r\n      </div>\r\n      <div>\r\n        <b>Контакты:</b>{\" \"}\r\n        {Object.keys(profile.contacts).map((key, i) => {\r\n          return (\r\n            <div key={i} className={classes.contact}>\r\n              <b>{key}</b>\r\n              {createField(Textarea, \"contacts.\" + key, key, [])}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: \"edit-profile\" })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import classes from \"./ProfInfo.module.css\";\r\nimport React, { useState } from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport defaultProfilePicture from \"../../../assets/images/user.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onMainPhotoSelected = e => {\r\n    if (e.target.files.length) savePhoto(e.target.files[0]);\r\n  };\r\n\r\n  const onSubmit = formData => {\r\n    saveProfile(formData).then(() => setEditMode(false));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <img\r\n          className={classes.avatar}\r\n          src={profile.photos.large || defaultProfilePicture}\r\n          alt={defaultProfilePicture}\r\n        />\r\n        <div>\r\n          {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n        </div>\r\n        <ProfileStatus\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          isOwner={isOwner}\r\n        />\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>Изменить</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Id:</b> {profile.userId}\r\n      </div>\r\n      <div>\r\n        <b>Имя:</b> {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>В поиске работы:</b> {profile.lookingForAJob ? \"Да\" : \"Нет\"}\r\n      </div>\r\n      <div>\r\n        <b>Проф.навыки:</b>{\" \"}\r\n        {profile.lookingForAJobDescription\r\n          ? profile.lookingForAJobDescription\r\n          : \"не заполнено\"}\r\n      </div>\r\n      <div>\r\n        <b>Обо мне:</b> {profile.aboutMe ? profile.aboutMe : \"не заполнено\"}\r\n      </div>\r\n      <div>\r\n        <b>Контакты:</b>{\" \"}\r\n        {Object.keys(profile.contacts).map((key, i) => {\r\n          return (\r\n            <Contact\r\n              key={i}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={classes.contact}>\r\n      <b>{contactTitle}:</b> {contactValue ? contactValue : \"не заполнено\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\nimport defaultProfilePicture from \"../../../../assets/images/user.png\";\r\n\r\nconst Post = ({ img, message, likeCounts, id }) => {\r\n  return (\r\n    <div className={classes.item} key={id}>\r\n      <img src={img} alt={defaultProfilePicture} />\r\n      {message}\r\n      <div>\r\n        <span>{likeCounts} лайков</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo(({ postsData, addPost }) => {\r\n  let postsElement = postsData.map(p => (\r\n    <Post\r\n      message={p.message}\r\n      img={p.img}\r\n      likeCounts={p.likeCounts}\r\n      id={p.id}\r\n      key={p.id}\r\n    />\r\n  ));\r\n\r\n  let onAddPost = values => {\r\n    addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <div>\r\n        <h3> Стена </h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={classes.posts}>{postsElement}</div>\r\n    </div>\r\n  );\r\n});\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst AddNewPostForm = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          name=\"newPostText\"\r\n          component={Textarea}\r\n          validate={[required, maxLength10]}\r\n          placeholder={\"Введите сообщение\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button> Добавить пост</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst AddNewPostFormRedux = reduxForm({ form: \"profileAddNewPostForm\" })(\r\n  AddNewPostForm\r\n);\r\n\r\nexport default MyPosts;\r\n","import { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    postsData: state.profilePage.postsData,\r\n    newPostText: state.profilePage.newPostText\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n  return {\r\n    addPost: newPostText => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = ({\r\n  isOwner,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile\r\n}) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        savePhoto={savePhoto}\r\n        saveProfile={saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile = () => {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n      this.refreshProfile();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}